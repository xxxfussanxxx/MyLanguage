%{
#include "defs.h"
#define YYSTYPE Cell *
%}
%token INTEGER SET SPAWN CHARACTOR MOVE UP DOWN LEFT RIGHT
	   KEY GO ADD SUBSTRACTION MULTIPLY DIVIDE SHARP WQUOTED LPAR RPAR
	   UNKNOWN
%%
MyLanguage
		: Statements
		{ $$ = $1; }

Statements
		: Statement
		{ $$ = $1; tree($$); }
		| Statements Statement
		{ $$ = $2; tree($$); }

Statement
		: SetCharactor
		{ $$ = $1; }
		| Move
		{ $$ = $1; }

SetCharactor
		: SET CHARACTOR Wquoted SetAttribute
		{ $$ = node("SET", cons(node("CHARACTOR", $3), $4)); }

SetAttribute
		: SPAWN Point
		{ $$ = node("SPAWN", $2); }

Point
		: Constant SHARP Constant
		{ $$ = node("#", cons($1, $3)); }

Move
		: Up
		{ $$ = $1; }
		| Down
		{ $$ = $1; }
		| Left
		{ $$ = $1; }
		| Right
		{ $$ = $1; }

Up :
		MOVE UP MoveAttribute
		{ $$ = node("MOVE", node("UP", $3)); }

Down
		: MOVE DOWN MoveAttribute
		{ $$ = node("MOVE", node("DOWN", $3)); }

Left
		: MOVE LEFT MoveAttribute
		{ $$ = node("MOVE", node("LEFT", $3)); }

Right
		: MOVE RIGHT MoveAttribute
		{ $$ = node("MOVE", node("RIGHT", $3)); }

MoveAttribute
		: KEY Wquoted GO Expression
		{ $$ =  cons(node("KEY", $2), node("GO", $4)); }

Expression
		: Expression ADD Term
		{ $$ = node("+", cons($1, $3)); }
		| Expression SUBSTRACTION Term
		{ $$ = node("-", cons($1, $3)); }
		| Term
		{ $$ = $1; }

Term
		: Term MULTIPLY Factor
		{ $$ = node("*", cons($1, $3)); }
		| Term DIVIDE Factor
		{ $$ = node("/", cons($1, $3)); }
		| Factor
		{ $$ = $1; }

Factor
		: Constant
		{ $$ = $1; }
		| LPAR Expression RPAR
		{ $$ = $2; }

Constant
		: INTEGER
		{ $$ = leaf("INTEGER", yytext); }

Wquoted
		: WQUOTED
		{ $$ = leaf("WQUOTED", yytext); }

%%
#include "lex.yy.c"
void yyerror(char *s) {
	fprintf(stderr, "\n%s at %d: nearby \"%s\"\n\n", s, linecounter, yytext);
	exit(EXIT_FAILURE);
}
